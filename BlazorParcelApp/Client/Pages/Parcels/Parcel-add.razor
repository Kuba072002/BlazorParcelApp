@page "/parcel-add"
@using BlazorParcelApp.Client.Services;
@using System.Text.Json;
@using Radzen;
@inject HttpClient Http
@inject NavigationManager NavManager
@attribute [Authorize(Roles = "User,Admin")]
@inject IAuthService AuthService
@inject ILockerService lockerService

@if (lockers == null || usernames == null)
{
    <p>Loading...</p>
}
else
{
<EditForm Model="parcelDto" OnSubmit="OnSubmit" class="d-flex flex-column align-items-center">
    <div class="border p-4 col-6 gap-2 d-flex flex-column">
    <h3 class="text-center">Parcel add</h3>
    
    <label>From:</label>
    <RadzenDropDown TValue="string" @bind-Value="CityFrom" Placeholder="Select city"
        AllowFiltering="true" Data="@(cities)" Style="width: 100%;" 
    />
    
        <RadzenDropDown TValue="int" @bind-Value="parcelDto.SrcLocker.Id" Placeholder="Select address"
        AllowFiltering="true" Data="@(lockers.Where(l=> l.City.Equals(CityFrom)).OrderBy(l=> l.Address).ToList())" 
        TextProperty="Address" ValueProperty="Id" Style="width: 100%;"
    />
    
    <label>To:</label>
    <RadzenDropDown TValue="string" @bind-Value="CityTo" Placeholder="Select city"
        AllowFiltering="true" Data="@(cities)" Style="width: 100%;"
    />
    
    <RadzenDropDown TValue="int" @bind-Value="parcelDto.DestLocker.Id" Placeholder="Select address"
        AllowFiltering="true" Data="@(lockers.Where(l=> l.City.Equals(CityTo)).OrderBy(l=> l.Address).ToList())" 
        TextProperty="Address" ValueProperty="Id" Style="width: 100%;" 
    />
    
    <label>Receiver:</label>
    <RadzenAutoComplete @bind-Value=@parcelDto.Receiver Data=@usernames 
        Style="width: 100%" />
    <div class="mt-3">
        <button type="submit" class="btn btn-primary w-100">Add</button>
        <div class="text-danger">
            <span>@errorMessage</span>
        </div>
    </div>
    </div>
</EditForm>
}

@code {
    ParcelDto parcelDto;
    private string errorMessage = string.Empty;
    string myUsername = string.Empty;
    List<LockerDto> lockers;
    List<string> usernames;
    List<string> cities;

    string CityFrom = string.Empty;
    string CityTo = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        parcelDto = new ParcelDto();
        lockers = await Http.GetFromJsonAsync<List<LockerDto>>($"/api/Locker");
        usernames = await Http.GetFromJsonAsync<List<string>>($"api/User/GetUsernames");
        myUsername = await AuthService.GetUsername();
        cities = lockers.Select(l => l.City).Order()
            .Distinct().ToList();
    }

    private async Task OnSubmit() {
        if (myUsername.Equals(string.Empty))
        {
               errorMessage = "Problem";
               return;
        }
        if (parcelDto.Receiver.Equals("") || parcelDto.SrcLocker.Id == 0 || parcelDto.DestLocker.Id == 0)
        {
            errorMessage = "Problem";
            return;
        }
        parcelDto.Sender = myUsername;

        var result = await Http.PostAsJsonAsync($"/api/Parcel/", parcelDto);

        if (!result.IsSuccessStatusCode) {
            errorMessage = await result.Content.ReadAsStringAsync();
            return;
        }

        NavManager.NavigateTo($"/parcels");
    }
}
