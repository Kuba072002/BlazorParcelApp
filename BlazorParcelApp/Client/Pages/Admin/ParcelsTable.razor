@page "/admin/parcels"
@using BlazorParcelApp.Client.Services;
@inject HttpClient Http
@inject IParcelService ParcelService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<h3>Parcels</h3>
<RadzenDataGrid PageSize="5" AllowColumnResize="true"
    AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true" 
    AllowPaging="true" AllowSorting="true" 
    AllowFiltering="true" FilterMode="FilterMode.Advanced"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
    LogicalFilterOperator="LogicalFilterOperator.Or" 
    FilterPopupRenderMode="PopupRenderMode.OnDemand"
    Data="@parcels" TItem="ParcelDto" >
    <Columns>
        <RadzenDataGridColumn TItem="ParcelDto" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="ParcelDto" Property="CurrentState" Title="State" />
        <RadzenDataGridColumn TItem="ParcelDto" Property="Sender" Title="Sender" />
        <RadzenDataGridColumn TItem="ParcelDto" Property="SrcLocker.Name" Title="SrcLocker" />
        <RadzenDataGridColumn TItem="ParcelDto" Property="Receiver" Title="Receiver" />
        <RadzenDataGridColumn TItem="ParcelDto" Property="DestLocker.Name" Title="DestLocker" />
        
        <RadzenDataGridColumn TItem="ParcelDto" TextAlign="TextAlign.Left"
            Filterable="false" Sortable="false" Width="90px">
            <Template Context="parcel">
                <RadzenButton Click="@(() => ShowDetails(parcel))" Text="Details" Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Secondary" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
@if (showDetails)
{
    <div class="d-flex flex-column align-items-center mt-3">
        <div class="border p-4 col-lg-6">
            <label>Name</label>
            <p><b>@parcelDto.Name</b></p>
            <label>State</label>
            <div class="d-flex flex-row justify-content-between">
            <p><b>@parcelDto.CurrentState.ToString()</b></p>
            <RadzenButton Click="@(() => ChangeState(parcelDto))"
                Text="Change status" Size="ButtonSize.ExtraSmall" 
                ButtonStyle="ButtonStyle.Secondary" />
            </div>
            <table class="table table-bordered mt-3">
                <thead class="text-center">
                    <tr>
                    <th scope="col">Sender</th>
                    <th scope="col">Receiver</th>
                    </tr>
                </thead>
                <tbody class="text-center">
                    <tr>
                    <td>@parcelDto.Sender</td>
                    <td>@parcelDto.Receiver</td>
                    </tr>  
                </tbody>
            </table>
            <h5 class="text-center mt-3">Source</h5>
            <div class="d-flex justify-content-center">
                <ul class="list-group list-group-horizontal">
                    <li class="list-group-item">@parcelDto.SrcLocker.Name</li>
                    <li class="list-group-item">@parcelDto.SrcLocker.City</li>
                    <li class="list-group-item">@parcelDto.SrcLocker.Address</li>
                </ul>
            </div>
            <h5 class="text-center mt-3">Destination</h5>
            <div class="d-flex justify-content-center">       
            <ul class="list-group list-group-horizontal">
                <li class="list-group-item">@parcelDto.DestLocker.Name</li>
                <li class="list-group-item">@parcelDto.DestLocker.City</li>
                <li class="list-group-item">@parcelDto.DestLocker.Address</li>
            </ul>
            </div>
            <h5 class="text-center mt-3">Notifications</h5>
            <div class="d-flex justify-content-center">       
            <ul class="list-group">
                @foreach (NotificationDto ndto in parcelDto.NotificationDtos)
                {
                    <li class="list-group-item">@ndto.Message  at  @ndto.CreatedAt</li>
                }
            </ul>
            </div>
        </div>
    </div>
}
@code {
    List<ParcelDto> parcels = new();
    ParcelDto parcelDto = new ParcelDto();

    bool showDetails = false;

    protected override async Task OnInitializedAsync() {
        parcels = await ParcelService.GetParcels();
    }

    private async Task ChangeState(ParcelDto parcel)
    {
        if (await JSRuntime.InvokeAsync<bool>
                ("confirm", "Are you sure you want to change status of this parcel?"))
        {
            await Http.PutAsJsonAsync($"/api/Parcel/UpdateParcelState/{parcel.Id}",parcel.Id);
            parcels = await ParcelService.GetParcels();
            parcelDto = parcels.FirstOrDefault(p => p.Id == parcelDto.Id);
        }
    }

    private void ShowDetails(ParcelDto parcel)
    {
        parcelDto = parcel;
        showDetails = (showDetails == true) ? false : true;
    }
}
