@page "/account/login"
@using BlazorParcelApp.Client.Services;
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@inject AppState AppState

<PageTitle>Login</PageTitle>

<EditForm Model="user" OnValidSubmit="HandleLogin" class="d-flex flex-column align-items-center">
<div class="border p-4 col-6">
    <h3 class="text-center">Login</h3>
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <button type="submit" class="btn btn-primary w-100">Login</button>
    <div class="text-danger  mt-2 text-center">
        <span>@errorMessage</span>
    </div>
    <div class="alert alert-info mt-3">
        If you don't have an account, please <a href="account/register">register</a>
    </div>
</div>
</EditForm>

@code {
    private UserLoginDto user = new UserLoginDto();

    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized() {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url)) {
            returnUrl = url;
        }
    }

    private async Task HandleLogin() {
        var result = await AuthService.Login(user);
        if (result.Success) {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo(returnUrl);
            NotificationService.Notify(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Login successfull",
                        Duration = 4000
                    }
            );
            await AppState.Set(await AuthService.GetAuthRole());
        }
        else {
            errorMessage = result.Message;
        }
    }
}
